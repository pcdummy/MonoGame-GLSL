//
// Translator library functions
//

vec4 xlat_lib_tex2Dlod(sampler2D s, vec4 coord) {
   return texture2DLod( s, coord.xy, coord.w);
}


float xlat_lib_saturate( float x) {
  return clamp( x, 0.0, 1.0);
}

vec2 xlat_lib_saturate( vec2 x) {
  return clamp( x, 0.0, 1.0);
}

vec3 xlat_lib_saturate( vec3 x) {
  return clamp( x, 0.0, 1.0);
}

vec4 xlat_lib_saturate( vec4 x) {
  return clamp( x, 0.0, 1.0);
}

mat2 xlat_lib_saturate(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}

mat3 xlat_lib_saturate(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}

mat4 xlat_lib_saturate(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}


//
// Structure definitions
//

struct VS_OUTPUT {
    vec4 position;
    vec4 uv;
    vec4 worldPos;
    vec4 textureWeights;
};

struct VS_INPUT {
    vec4 position;
    vec4 uv;
};


//
// Global variable definitions
//

uniform sampler2D displacementSampler;
uniform float maxHeight;
uniform mat4 proj;
uniform float texelSize;
uniform float textureSize;
uniform mat4 view;
uniform mat4 world;

//
// Function declarations
//

vec4 tex2Dlod_bilinear( in sampler2D texSam, in vec4 uv );
VS_OUTPUT Transform( in VS_INPUT In );

//
// Function definitions
//

vec4 tex2Dlod_bilinear( in sampler2D texSam, in vec4 uv ) {
    vec4 height00;
    vec4 height10;
    vec4 height01;
    vec4 height11;
    vec2 f;
    vec4 tA;
    vec4 tB;

    height00 = xlat_lib_tex2Dlod( texSam, uv);
    height10 = xlat_lib_tex2Dlod( texSam, (uv + vec4( texelSize, 0.000000, 0.000000, 0.000000)));
    height01 = xlat_lib_tex2Dlod( texSam, (uv + vec4( 0.000000, texelSize, 0.000000, 0.000000)));
    height11 = xlat_lib_tex2Dlod( texSam, (uv + vec4( texelSize, texelSize, 0.000000, 0.000000)));
    f = fract( (uv.xy  * textureSize) );
    tA = mix( height00, height10, vec4( f.x ));
    tB = mix( height01, height11, vec4( f.x ));
    return mix( tA, tB, vec4( f.y ));
}


VS_OUTPUT Transform( in VS_INPUT In ) {
    VS_OUTPUT Out;
    mat4 viewProj;
    mat4 worldViewProj;
    float height;
    vec4 TexWeights;
    float totalWeight;

    Out = VS_OUTPUT( vec4( 0.000000, 0.000000, 0.000000, 0.000000), vec4( 0.000000, 0.000000, 0.000000, 0.000000), vec4( 0.000000, 0.000000, 0.000000, 0.000000), vec4( 0.000000, 0.000000, 0.000000, 0.000000));
    viewProj = ( view * proj );
    worldViewProj = ( world * viewProj );
    height = tex2Dlod_bilinear( displacementSampler, vec4( In.uv.xy , 0.000000, 0.000000)).x ;
    In.position.y  = (height * maxHeight);
    Out.worldPos = ( In.position * world );
    Out.position = ( In.position * worldViewProj );
    Out.uv = In.uv;
    TexWeights = vec4( 0.000000);
    TexWeights.x  = xlat_lib_saturate( (1.00000 - (abs( (height - 0.000000) ) / 0.200000)) );
    TexWeights.y  = xlat_lib_saturate( (1.00000 - (abs( (height - 0.300000) ) / 0.250000)) );
    TexWeights.z  = xlat_lib_saturate( (1.00000 - (abs( (height - 0.600000) ) / 0.250000)) );
    TexWeights.w  = xlat_lib_saturate( (1.00000 - (abs( (height - 0.900000) ) / 0.250000)) );
    totalWeight = (((TexWeights.x  + TexWeights.y ) + TexWeights.z ) + TexWeights.w );
    TexWeights /= totalWeight;
    Out.textureWeights = TexWeights;
    return Out;
}


//
// Translator's entry point
//
void main() {
    VS_OUTPUT xlat_retVal;
    VS_INPUT xlat_temp_In;
    xlat_temp_In.position = vec4( gl_Vertex);
    xlat_temp_In.uv = vec4( gl_MultiTexCoord0);

    xlat_retVal = Transform( xlat_temp_In);

    gl_Position = vec4( xlat_retVal.position);
    gl_TexCoord[0] = vec4( xlat_retVal.uv);
    gl_TexCoord[1] = vec4( xlat_retVal.worldPos);
    gl_TexCoord[2] = vec4( xlat_retVal.textureWeights);
}



